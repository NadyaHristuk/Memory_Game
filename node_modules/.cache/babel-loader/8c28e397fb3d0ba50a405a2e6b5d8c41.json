{"ast":null,"code":"import _defineProperty from \"/Users/hristuknadya/Downloads/Memory_Game-master/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { combineReducer } from 'redux';\nimport { Type } from '../GameAction';\nimport generateCards from '../../utils/generateCards'; // const initialState = {\n//   step: 20,\n//   overturn: [],\n//   cards: generateCards(),\n//   id: '',\n//   disabled: false,\n// };\n// const gameReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case Type.SHOT:\n//       if (state.step === 0) {\n//         alert('Game Over! Try again');\n//         return { ...state, step: 30, overturn: [], disabled: false };\n//       }\n//       // const cardClick = state.cards.find(card => card.id);\n//       // console.log(cardClick.id);\n//       // let turn = cardClick.id;\n//       // turn = action.payload;\n//       console.log(action.payload);\n//       return {\n//         ...state,\n//         step: state.step - 1,\n//         id: state.id,\n//         overturn: [...state.overturn, state.id],\n//         disabled: (state.disabled = true),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nconst initialState = {\n  cards: [],\n  step: 20,\n  wait: false,\n  nick1: null,\n  nick2: null,\n  round: 1\n};\n\nconst gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Type.START_GAME:\n      return _objectSpread({}, state, {\n        cards: [...action.cards]\n      });\n\n    case Type.OVERTURN_CARD:\n      console.log(state.nick1);\n      console.log(state.nick2);\n      let newState = {\n        round: state.round + 1\n      };\n\n      if (state.round % 2 === 1) {\n        let cardClicked = state.cards.find(card => {\n          return card.id === action.id;\n        });\n        Object.assign(newState, {\n          nick1: cardClicked.idx,\n          nick2: null,\n          cards: state.cards.map(card => {\n            return card.id === action.id || card.rival === 'true' ? Object.assign({}, card, {\n              overturn: true\n            }) : Object.assign({}, card, {\n              overturn: false\n            });\n          })\n        });\n      } else {\n        let cardClicked = state.cards.find(card => {\n          return card.id === action.id;\n        });\n\n        if (cardClicked.idx === state.nick1) {\n          Object.assign(newState, {\n            nick1: state.nick1,\n            nick2: cardClicked.idx,\n            cards: state.cards.map(card => {\n              return card.id === action.id || card.idx === state.nick1 ? Object.assign({}, card, {\n                overturn: true,\n                rival: true\n              }) : card;\n            })\n          });\n        } else {\n          Object.assign(newState, {\n            nick1: state.nick1,\n            nick2: cardClicked.rel,\n            cards: state.cards.map(card => {\n              return card.id === action.id ? Object.assign({}, card, {\n                overturn: true\n              }) : card;\n            })\n          });\n        }\n      }\n\n      return newState;\n    //\n    //\n    // робочий 2 варіант\n    // if (state.nick1 === null) {\n    //   return {\n    //     ...state,\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.id === action.id ? { ...card, overturn: true } : card,\n    //       ),\n    //     ],\n    //     nick1: action.idx,\n    //   };\n    // } else {\n    //   if (\n    //     state.nick1 === state.nick2 &&\n    //     state.nick2 !== null &&\n    //     state.nick1 !== null\n    //   )\n    //     return {\n    //       ...state,\n    //       ...state,\n    //       cards: [\n    //         ...state.cards.map(card =>\n    //           card.overturn === true &&\n    //           card.rival === false &&\n    //           card.id !== action.id\n    //             ? { ...card, rival: true }\n    //             : card,\n    //         ),\n    //       ],\n    //       step: state.step - 1,\n    //       nick1: null,\n    //       nick2: null,\n    //     };\n    // }\n    // if (\n    //   state.nick1 !== state.nick2 &&\n    //   state.nick2 !== null &&\n    //   state.nick1 !== null\n    // ) {\n    //   return {\n    //     ...state,\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.overturn === true && card.rival === false\n    //           ? { ...card, overturn: false } &&\n    //             (card.overturn === false &&\n    //               card.rival === false &&\n    //               card.id === action.id)\n    //           : card,\n    //       ),\n    //     ],\n    //     step: state.step - 1,\n    //     nick1: null,\n    //     nick2: null,\n    //   };\n    // }\n    // if (\n    //   state.nick1 === state.nick2 &&\n    //   state.nick2 !== null &&\n    //   state.nick1 !== null\n    // ) {\n    //   return {\n    //     ...state,\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.overturn === true ? { ...card, rival: true } : card,\n    //       ),\n    //     ],\n    //     step: state.step - 1,\n    //     nick1: null,\n    //     nick2: null,\n    //   };\n    // }\n    // return {\n    //   ...state,\n    //   cards: [\n    //     ...state.cards.map(card =>\n    //       card.id === action.id ? { ...card, overturn: true } : card,\n    //     ),\n    //   ],\n    //   nick2: action.idx,\n    // };\n    //\n    //\n    //\n    //\n    //\n    //\n    // const flip = () => {\n    //     state.cards.filter(\n    //       card => card.overturn === true && card.rival === false,\n    //     ),\n    // };\n    // console.log(flip);\n    // if (\n    //   Object.keys({\n    //     ...state.cards.filter(\n    //       card => card.overturn === true && card.rival === false,\n    //     ),\n    //   }).length >= 2\n    // ) {\n    //   console.log(state.cards[0].idx);\n    //   if (state.cards[0].idx === state.cards[1].idx) {\n    //     alert(5);\n    //   }\n    //   return {\n    //     ...state,\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.overturn === true ? { ...card, overturn: false } : card,\n    //       ),\n    //     ],\n    //     step: state.step - 1,\n    //   };\n    //   // console.log(\n    //   //   ...state.cards.filter(card => card.type[0] === card.type[1]),\n    //   // )\n    // }\n    // робочий варіант\n    // return {\n    //   ...state,\n    //   cards: [\n    //     ...state.cards.map(card =>\n    //       card.id === action.id ? { ...card, overturn: true } : card,\n    //     ),\n    //   ],\n    // };\n    // console.log(\n    //   {\n    //     // cards: [\n    //     //   {\n    //     //     ...state.cards.filter(card => (card.overturn = true)),\n    //     //     ...state.cards,\n    //     //   },\n    //     // ],\n    //     ...state,\n    //     // cards: [\n    //     //   ...state.cards.slice(0, action.id),\n    //     //   { ...action.idx, overturn: true },\n    //     //   ...state.cards.slice(action.id + 1),\n    //     // ],\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.id === action.id ? { ...card, overturn: true } : card,\n    //       ),\n    //     ],\n    //     step: state.step - 1,\n    //   },\n    //   'id',\n    //   action.id,\n    // console.log(action.cards, state.step - 1)\n    //\n    //\n    //\n\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;","map":{"version":3,"sources":["/Users/hristuknadya/Downloads/Memory_Game-master/src/redux/reducer/index.js"],"names":["Type","generateCards","initialState","cards","step","wait","nick1","nick2","round","gameReducer","state","action","type","START_GAME","OVERTURN_CARD","console","log","newState","cardClicked","find","card","id","Object","assign","idx","map","rival","overturn","rel"],"mappings":"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","sourcesContent":["// import { combineReducer } from 'redux';\nimport { Type } from '../GameAction';\nimport generateCards from '../../utils/generateCards';\n\n// const initialState = {\n//   step: 20,\n//   overturn: [],\n//   cards: generateCards(),\n//   id: '',\n//   disabled: false,\n// };\n\n// const gameReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case Type.SHOT:\n//       if (state.step === 0) {\n//         alert('Game Over! Try again');\n//         return { ...state, step: 30, overturn: [], disabled: false };\n//       }\n//       // const cardClick = state.cards.find(card => card.id);\n//       // console.log(cardClick.id);\n//       // let turn = cardClick.id;\n//       // turn = action.payload;\n//       console.log(action.payload);\n//       return {\n//         ...state,\n//         step: state.step - 1,\n//         id: state.id,\n//         overturn: [...state.overturn, state.id],\n//         disabled: (state.disabled = true),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nconst initialState = {\n  cards: [],\n  step: 20,\n  wait: false,\n  nick1: null,\n  nick2: null,\n  round: 1,\n};\n\nconst gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Type.START_GAME:\n      return {\n        ...state,\n        cards: [...action.cards],\n      };\n    case Type.OVERTURN_CARD:\n      console.log(state.nick1);\n      console.log(state.nick2);\n      let newState = { round: state.round + 1 };\n      if (state.round % 2 === 1) {\n        let cardClicked = state.cards.find(card => {\n          return card.id === action.id;\n        });\n        Object.assign(newState, {\n          nick1: cardClicked.idx,\n          nick2: null,\n          cards: state.cards.map(card => {\n            return card.id === action.id || card.rival === 'true'\n              ? Object.assign({}, card, { overturn: true })\n              : Object.assign({}, card, { overturn: false });\n          }),\n        });\n      } else {\n        let cardClicked = state.cards.find(card => {\n          return card.id === action.id;\n        });\n        if (cardClicked.idx === state.nick1) {\n          Object.assign(newState, {\n            nick1: state.nick1,\n            nick2: cardClicked.idx,\n            cards: state.cards.map(card => {\n              return card.id === action.id || card.idx === state.nick1\n                ? Object.assign({}, card, { overturn: true, rival: true })\n                : card;\n            }),\n          });\n        } else {\n          Object.assign(newState, {\n            nick1: state.nick1,\n            nick2: cardClicked.rel,\n            cards: state.cards.map(card => {\n              return card.id === action.id\n                ? Object.assign({}, card, { overturn: true })\n                : card;\n            }),\n          });\n        }\n      }\n      return newState;\n    //\n    //\n    // робочий 2 варіант\n    // if (state.nick1 === null) {\n    //   return {\n    //     ...state,\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.id === action.id ? { ...card, overturn: true } : card,\n    //       ),\n    //     ],\n    //     nick1: action.idx,\n    //   };\n    // } else {\n    //   if (\n    //     state.nick1 === state.nick2 &&\n    //     state.nick2 !== null &&\n    //     state.nick1 !== null\n    //   )\n    //     return {\n    //       ...state,\n    //       ...state,\n    //       cards: [\n    //         ...state.cards.map(card =>\n    //           card.overturn === true &&\n    //           card.rival === false &&\n    //           card.id !== action.id\n    //             ? { ...card, rival: true }\n    //             : card,\n    //         ),\n    //       ],\n    //       step: state.step - 1,\n    //       nick1: null,\n    //       nick2: null,\n    //     };\n    // }\n    // if (\n    //   state.nick1 !== state.nick2 &&\n    //   state.nick2 !== null &&\n    //   state.nick1 !== null\n    // ) {\n    //   return {\n    //     ...state,\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.overturn === true && card.rival === false\n    //           ? { ...card, overturn: false } &&\n    //             (card.overturn === false &&\n    //               card.rival === false &&\n    //               card.id === action.id)\n    //           : card,\n    //       ),\n    //     ],\n    //     step: state.step - 1,\n    //     nick1: null,\n    //     nick2: null,\n    //   };\n    // }\n\n    // if (\n    //   state.nick1 === state.nick2 &&\n    //   state.nick2 !== null &&\n    //   state.nick1 !== null\n    // ) {\n    //   return {\n    //     ...state,\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.overturn === true ? { ...card, rival: true } : card,\n    //       ),\n    //     ],\n    //     step: state.step - 1,\n    //     nick1: null,\n    //     nick2: null,\n    //   };\n    // }\n    // return {\n    //   ...state,\n    //   cards: [\n    //     ...state.cards.map(card =>\n    //       card.id === action.id ? { ...card, overturn: true } : card,\n    //     ),\n    //   ],\n    //   nick2: action.idx,\n    // };\n\n    //\n    //\n    //\n    //\n    //\n    //\n    // const flip = () => {\n\n    //     state.cards.filter(\n    //       card => card.overturn === true && card.rival === false,\n    //     ),\n\n    // };\n    // console.log(flip);\n    // if (\n    //   Object.keys({\n    //     ...state.cards.filter(\n    //       card => card.overturn === true && card.rival === false,\n    //     ),\n    //   }).length >= 2\n    // ) {\n    //   console.log(state.cards[0].idx);\n    //   if (state.cards[0].idx === state.cards[1].idx) {\n    //     alert(5);\n    //   }\n    //   return {\n    //     ...state,\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.overturn === true ? { ...card, overturn: false } : card,\n    //       ),\n    //     ],\n    //     step: state.step - 1,\n    //   };\n    //   // console.log(\n    //   //   ...state.cards.filter(card => card.type[0] === card.type[1]),\n    //   // )\n    // }\n\n    // робочий варіант\n    // return {\n    //   ...state,\n    //   cards: [\n    //     ...state.cards.map(card =>\n    //       card.id === action.id ? { ...card, overturn: true } : card,\n    //     ),\n    //   ],\n    // };\n\n    // console.log(\n    //   {\n    //     // cards: [\n    //     //   {\n    //     //     ...state.cards.filter(card => (card.overturn = true)),\n    //     //     ...state.cards,\n    //     //   },\n    //     // ],\n    //     ...state,\n    //     // cards: [\n    //     //   ...state.cards.slice(0, action.id),\n    //     //   { ...action.idx, overturn: true },\n    //     //   ...state.cards.slice(action.id + 1),\n    //     // ],\n    //     cards: [\n    //       ...state.cards.map(card =>\n    //         card.id === action.id ? { ...card, overturn: true } : card,\n    //       ),\n    //     ],\n    //     step: state.step - 1,\n    //   },\n    //   'id',\n    //   action.id,\n    // console.log(action.cards, state.step - 1)\n    //\n    //\n    //\n\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;\n"]},"metadata":{},"sourceType":"module"}